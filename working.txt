# Rounding Decimals
## Basic Concept
Rounding is an essential math skill that allows us to simplify and approximate numbers to make them easier to work with.
Rounding decimals involves determining the place value to round to, examining the digit to the right of that place value, 
and making a decision whether to round up or down.

Rounding to the nearest whole number is the most common form of rounding. To round to the nearest whole number, 
you round up if the digit being rounded is greater than or equal to 5 and you round down if digit being rounded
is less than 5.

There are other forms of rounding where the digit being rounded is always rounded either down (also called floor rounding) 
or up (also called ceiling rounding), regardless of it is greater or less than 5.

Let us look at an example of rounding decimals:

Round 3.426 to the nearest hundredth.

Lets first determine which number is in the hundredths and thousands column:

| ones | decimal | tenths | hundredths | thousandths |
| :-----: | :------: | :------: | :------: | :------: |
| 3 | . | 4 | 2 | 6 |

From the table above, we can determine that the number in the hundredth column is 2
and in the thousands column we have 6.

Since 6 in the thousands column is greater than 5, we will round up and make the 2 from the hundredths column 3
and remove the 6. Therefore, 3.426 rounded to the nearest hundredth is 3.43.

Here is another example:

Round 7.943 to the nearest tenth.

| ones | decimal | tenths | hundredths | thousandths |
| :-----: | :-----: | :-----: | :-----: | :-----: |
| 7 | . | 9 | 4 | 3 |

Since 4 in the hundredths column is less than 5, we will simply remove it and any numbers 
to the right of it. Therefore, 7.943 rounded to the nearest tenth is 7.9.

One more example:

Round 2.95 to the nearest tenth.

| ones | decimal | tenths | hundredths |
| :-----: | :-----: | :-----: | :-----: |
| 2 | . | 9 | 5 |

Since 5 in the hundredths column will round up and 9 becomes 10, we end up with 3.0.
Therefore, 2.95 rounded to the nearest tenth equals 3.0.


# Ordering Decimal Numbers
To order decimal numbers means to arrange them in increasing or decreasing order from the smallest to the largest, or from the largest to the smallest.
When ordering decimal numbers, you need to compare the values of each digit to determine which number is greater or smaller. Start by comparing the leftmost digit, and then move on to the next digit to the right if necessary. If the leftmost digits of two decimal numbers are the same, then compare the next digit to the right until a difference is found.
For example, let's say you have the following decimal numbers: 2.45, 3.1, 1.98, 2.4, and 3.02. To order these numbers from the smallest to the largest, you would start by comparing the leftmost digit of each number:

-   1.98
    
-   2.4
    
-   2.45
    
-   3.02
    
-   3.1
    

In this case, the decimal numbers are now in ascending order from the smallest (1.98) to the largest (3.1).

If you need to order decimal numbers from the largest to the smallest, you can use the same process but compare the digits in the reverse order. In the example above, the decimal numbers ordered from largest to smallest would be:

-   3.1
    
-   3.02
    
-   2.45
    
-   2.4
    
-   1.98
    

In summary, to order decimal numbers, compare the digits of each number starting from the left and move to the right as needed.

In Python, you can use the built-in sorted() function to order decimal numbers in ascending or descending order. Here's an example:

python

# Create a list of decimal numbers

decimals = [3.14, 2.71, 1.618, 4.20, 0.123]

  

# Sort the list in ascending order

sorted_decimals = sorted(decimals)

print(sorted_decimals) # Output: [0.123, 1.618, 2.71, 3.14, 4.2]

  

# Sort the list in descending order

sorted_decimals_desc = sorted(decimals, reverse=True)

print(sorted_decimals_desc) # Output: [4.2, 3.14, 2.71, 1.618, 0.123]

  

In the example above, we created a list of decimal numbers and used the sorted() function to order them in ascending order by default. We then used the reverse parameter of the sorted() function to sort the list in descending order. Note that the original list decimals remains unchanged, and the sorted lists are assigned to new variables sorted_decimals and sorted_decimals_desc.

If you have a list of strings that represent decimal numbers, you can convert them to floats first before sorting them. Here's an example:

python

# Create a list of decimal numbers as strings

decimals_str = ['3.14', '2.71', '1.618', '4.20', '0.123']

  

# Convert the strings to floats and sort the list in ascending order

sorted_decimals = sorted([float(d) for d in decimals_str])

print(sorted_decimals) # Output: [0.123, 1.618, 2.71, 3.14, 4.2]

  

In this example, we used a list comprehension to convert each string in the decimals_str list to a float, and then sorted the resulting list in ascending order using the sorted() function.

# Other topics may be needed

Mean

Median

Negative exponents

-   Book says: “When any number, except 0, has a negative exponent, take the reciprocal of the number with its opposite exponent”
    
-   Openstax says: “The negative exponent tells us we can rewrite the expression by taking the reciprocal of the base and then changing the sign of the exponent.”
    
-   Khan says “negative traditionally means the opposite of…”. That is why negative means opposite of multiplication, which is division…. hmm.
    
-   All three state the rule as: a-n =1an
    
-   I probably need to cover reciprocals first
    

# To do

make sure you are using consistent language to describe “lessons”, “course”, or “module(s)”.
