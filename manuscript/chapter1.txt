# Mathematics with Python for ML Foundations!

# Exponents
## Basic Concept
There are times when we must multiply a number by itself multiple times. We could do something like this:

`2 \times 2 \times 2 \times 2 \times 2 \times 2`$

But this can be a tedious way to show such an expression and hard to track how many times it is getting multiplied. Instead, we use exponents to show how many times to multiply a number. Here is an example of exponential notation:

`a^{n}`$

In this exponential notation, the variable `a`$ is called the base and the variable `n`$ is called the exponent. The exponent represents the number of times to multiply the base by itself. We can evaluate the exponential notation when the two variables are replaced with a number like this:

`2^{6}`$

In this example the number two is the base and the number six is the exponent. To solve this, we need to multiply the number two six times.

## Python Implementation
Python’s standard library supports exponents. We can easily solve exponential problems with Python using the exponentiation operator. Here are a few examples:

`\text{Evaluate}\ a^n\ \text{when}\ a = 5,\ n = 4`$

This one can be solved like this:

```python
a = 5
n = 4
answer = a ** n
print("5^4 =", answer)

# Expected output: 
# 5^4 = 625
```

`\text{Evaluate}\ -a^{a}\ \text{when}\ a=4,\ n=2`$

Be careful with this one because the negative sign before the base means the answer will be negative:
```python
a = 4
n = 2
answer = -a ** n
print("-5^4 =", answer)

# Expected output: 
# -5^4 = -16
```

`\text{Evaluate}\ (-a)^{n}\ when\ a=2,\ n=3`$

Inside parentheses, the negative sign means that each multiplication will be carried out on a negative base. Just keep in mind that a negative number raised to an odd power is always a negative answer:

```python
a = 2
n = 3
answer = (-a) ** n
print("(-2)^3 =", answer)

# Expected output: 
# (-2)^3 = -8
```

`\text{Evaluate}\ (-a)^{n}\ when\ a=3,\ n=4`$

This is similar to the previous example. Just keep in mind that a negative number raised to an even power is always a positive answer:
```python
a = 3
n = 4
answer = (-a) ** n
print("(-3)^4 =", answer)

# Expected output: 
# (-3)^4 = 81
```

# Order of Operations
## Basic Concept
We must have a way of correctly sequencing calculations when an expression contains multiple operations. Otherwise, expressions may have different meanings, and they may result in different values.

The order of operations is a set of rules used to clarify the order in which mathematical operations should be performed in an expression. Generally, the order of operations is executed left to right on parentheses, exponents, multiplication and division, and addition and subtraction, in that order. Order of operations is also known as the "PEMDAS" rule. Can you see why?

There are three things to keep in mind:
1.  Multiplication and division are of equal priority as long as they are solved left to right.
2.  The same is true for addition and subtraction: their priority is the same.
3.  When there are multiple grouping symbols, we simplify the innermost parentheses first and work outward.

## Python Implementation 
Python follows the order of operations for all of its mathematical operations.

`\text{Simplify}\ 5 + 23 + 3[6 -3(4\times2)]`$

To simplify an expression means to do all the math possible, using the order of operations. Here is how we can simplify this expression in Python:

```python
answer = 10 + 1 + 6 / 2 * (3 - 1)
print(answer)

# Expected output:
# Simplifying 10 + 1 + 6 / 2 * (3 - 1) equals 17.0
```

# Plotting Points and Intervals on the Number Line
## Basic Concept
In this section, we will explore a basic number line and the steps to plot points and intervals on a number line.

A number line is just a horizontal line that is used to display all the possible outcomes. It is similar to a ruler in that it helps us describe and compare numbers. We get to choose the scale of the number line and where the center is. For example, we might decide that we only need to show the numbers 70 through 90 where 80 would be the center of our number line. Typically however, number lines have zero at their center with positive numbers to the right of the zero and negative number to the left of the zero.

To create a number line with a scale of -3 to 3, simply draw a horizontal line, mark 0 as the center, and label the numbers -3, -2, -1, 0, 1, 2, 3 from left to right:

![number line without points](num-line-1.png)

To plot a point, for example -2.5, we first have to understand that -2.5 is between -2 and -3. We can then put a circle on the number line that is halfway between those two numbers:

![number line with one point at -2.5](num-line-2.png)

Keep in mind that their may be times when we need to plot multiple points on a single number line:

![number line with multiple points](num-line-3.png)

## Python Implementation
Python’s standard library may not support the number line as a visualization, but matlotlib does make it possible to create a number line with points. The following Python code will generate a number line, add some points and save an image of the number line to the current directory as a file named num-line.png:

```python
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt

def  setup(ax):
	"""Set up common parameters for the Axes"""

	# Only show the bottom spine.
	ax.spines[['left', 'right', 'top']].set_visible(False)

	# Make the ticks for the y-axis null.
	ax.yaxis.set_major_locator(ticker.NullLocator())

	# Make the ticks for the x-axis 1 inch apart.
	ax.xaxis.set_major_locator(ticker.MultipleLocator(1))

	# Define the tick styles.
	ax.tick_params(which='major', width=1.00, length=5)

	# Define number line range.
	ax.set_xlim(-3, 3)
	ax.set_ylim(0, 1)

# Create an empty figure with no axes.
# Make the figure 6 inches wide and 4 inches high.
plt.figure(figsize=(6.0, 4.0))

# Add and center an axis inside the image.
# The first parameter is the number of rows.
# The second parameter is the number of columns.
# The third parameter is an index for grid placement.
ax = plt.subplot(2, 1, 1)

# Give that axis the common parameters.
setup(ax)

# Create the points on the number line.
# Each point in defined by a set of two numbers.
# For each set, the first number is the x-axis position
# and the second number is the y-axis position.
ax.plot(
	-1, 0.1, 
	0, 0.1, 
	1.5, 0.1, 
	2, 0.1, 
	color='tab:blue', 
	marker='o'
)

# Save an image of the number line
plt.savefig("num-line.png")
```

# Expressing Inequalities
## Basic Concept
An inequality is used to express that one value is greater than or less than some other value (and possibly also equal to the other value). Solutions to inequalities, that is numbers that make the equation true, are infinite.

We have three forms of expressing the infinite nature of possible solutions to an inequality: The number line, set-builder notation, and interval notation. In this lesson, we will look at the number line method first and then look at the interval method. We won’t study set-builder notation, but it is very close to what you have probably already seen in many textbooks to express inequalities: Set-builder notation looks similar to `x >3`$ or `x \leq 4`$

To express all solutions to an inequality graphically, draw a number line and shade in all the values that are solutions to the inequality. Here are a couple examples:

`\text{Express the inequality, x is greater than -1 on a number line}`$

We graph the solutions to the above inequality on the number line by shading in all the numbers to the right of -1 to show that all numbers greater than -1 are solutions. Because the number -1 itself is not included in the solution, we use an open dot on the number line at -1:

![number line showing x greater than -1](num-line-4.png)

`\text{Express the inequality, x is less than or equal to 2 on a number line}`$

Graphing the above inequality is similar to graphing “x is greater than -1”. However we need to do two things differently this time: First we need to shade the number line in the negative direction and second we need to show that 2 is included in the solution by using a closed dot on the number line:

![number line showing x less than or equal to 2](num-line-5.png)

## Mathematical Notation

In addition to using the number line, we can use interval notation to express the solutions to an inequality. For example, the inequality “x is greater than 3” can be expressed in the interval notation shown here: `(x, \infty)`$.

Interval notation can use parentheses and square brackets, but keep in mind that parentheses and square brackets mean different things. Parentheses are used to indicate that the solution is greater or less than a number, while square brackets indicate that the solution is also equal to a number (in addition to being either greater or less than).

Also keep in mind that infinity and negative infinity are not numbers in the usual sense and cannot be "equal" to another number, so parentheses are used to represent the concept of infinity.

Let’s look at some examples of interval notation to help clarify the rules:

All numbers between a and b, including a and b: `[a,b]`$

All numbers between a and b, but not including a or b: `(a,b)`$

All numbers between a and b, including a: `[a,b)`$

All numbers greater than a, but not including a: `(a, \infty)`$

All numbers less than b, but not including b: `(-\infty, b)`$

All numbers greater than a, including a: `[a, \infty)`$

All numbers less than b, including b: `(-\infty,b]`$

All numbers: `(\infty,\infty)`$

## Python Implementation
Python can graph inequalities on a number line with the matplotlib library, just like when we created a number line with matlotlib. Let us explore the code for graphing our two initial inequality examples, x is greater than -1 and x is less than or equal to 2:

```python
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt

def  setup(ax):
	"""Set up common parameters for the Axes"""

	# Only show the bottom spine.
	ax.spines[['left', 'right', 'top']].set_visible(False)

	# Make the ticks for the y-axis null.
	ax.yaxis.set_major_locator(ticker.NullLocator())

	# Make the ticks for the x-axis 1 inch apart.
	ax.xaxis.set_major_locator(ticker.MultipleLocator(1))

	# Define the tick styles.
	ax.tick_params(which='major', width=1.00, length=5)

	# Define number line range.
	ax.set_xlim(-3, 3)
	ax.set_ylim(0, 1)

# Create an empty figure with no axes.
# Make the figure 6 inches wide and 4 inches high.
plt.figure(figsize=(6.0, 4.0))

# Add and center an axis inside the image.
# The first parameter is the number of rows.
# The second parameter is the number of columns.
# The third parameter is an index for grid placement.
ax = plt.subplot(2, 1, 1)

# Give that axis the common parameters.
setup(ax)

# Create the points on the number line
# for figure 1.
plt.plot([-0.9, 2.9], [0.1, 0.1])
ax.plot(
	-1, 0.1, 
	color='tab:blue', 
	fillstyle='none', 
	marker='o'
)
ax.plot(
	2.9, 0.1, 
	color='tab:blue', 
	marker='>'
)

# Save figure 1 which graphs 
# the inequality "x is greater than -1".
plt.savefig("num-line-4.png")

Start figure 2.
plt.figure(2, figsize=(6.0, 4.0))
ax = plt.subplot(2, 1, 1)
setup(ax)

# Create the points on the number line
# for figure 2.
plt.plot([-2.9, 1.9], [0.1, 0.1])
ax.plot(2, 0.1, color='tab:blue', marker='o')
ax.plot(-2.9, 0.1, color='tab:blue', marker='<')

# Save figure 2 which graphs 
# the inequality "x is less than or equal to 2".
plt.savefig("num-line-5.png")
```

# Absolute Values
## Basic Concept
In mathematical equations or expressions, we often use absolute values to ensure that we are only working with positive numbers.
For instance, if we have an equation that contains a variable that can be either positive or negative, we can use absolute values to ensure that the final answer is positive.

There are four rules to remember about absolute values:
1. The absolute value of a number is its distance from 0 on the number line.
2. The absolute value of a number is always a non-negative value. In other words, the absolute value is always greater than or equal to zero.
3. If the number is positive, then its absolute value is simply the same as the number itself.
4. If the number is negative, then its absolute value is the opposite of the number (remove the the negative sign).

In summary, the absolute value of a number is always positive, and it is obtained by removing any negative sign from a negative number, or leaving a positive number unchanged.

## Mathematical Notation
The symbol used to represent absolute value is vertical bars, | `n`$ |.
For example, `|-5|`$ represents the absolute value of 5.
Or using a variable, the absolute value of `n`$ is written as | `n`$ |.
The rule that absolute values are equal to or great than 0 can be expressed like this: `|n| ≥ 0`$

## Python Implementation
Python's standard library has the build-in function, abs(x) which returns the absolute value of a number.

```python
x = -20
y = 14
print(abs(x) + abs(y))

# Expected output: 
# 34
```

# Distance Between Two Points
## Basic Concept
We often want to look at two points on the number line and determine the distance between them.
To find the distance between two points on the number line, we will always subtract the smaller number from the larger.
The distance between the two points should always be converted to an absolute value (in other words, a positive number).

## Python Implementation
Here we create a Python function which takes two numbers and calculates their
distance (assuming the two numbers were points on a number line). One other thing to note
is that this example illustrates the "additive inverse axiom" which dictates that 
subtracting a negative number, negative 20 in this example, is actually like adding 
the positive counterpart of that number, that is, positive 20.

```python
# Declare a function which receives two numbers
# and returns the absolute value of subtracting
# the smaller number from the larger
def calculate_distance(a, b):
    # Sort a and b in descending order
    sorted_a, sorted_b = max(a, b), min(a, b)

    return abs(sorted_a - sorted_b)

# will print the return value of the function
print(calculate_distance(-8, -20))

# Expected Output:
# 12
```

# Rounding Decimals
## Basic Concept
Rounding is an essential math skill that allows us to simplify and approximate numbers to make them easier to work with.
Rounding decimals involves determining the place value to round to, examining the digit to the right of that place value, 
and making a decision whether to round up or down.

Rounding to the nearest whole number is the most common form of rounding. To round to the nearest whole number, 
you round up if the digit being rounded is greater than or equal to 5 and you round down if digit being rounded
is less than 5.

There are other forms of rounding where the digit being rounded is always rounded either down (also called floor rounding) 
or up (also called ceiling rounding), regardless of it is greater or less than 5.

Let us look at an example of rounding decimals:

Round 3.426 to the nearest hundredth.

Lets first determine which number is in the hundredths and thousands column:

| ones | decimal | tenths | hundredths | thousandths |
| :-----: | :------: | :------: | :------: | :------: |
| 3 | . | 4 | 2 | 6 |

From the table above, we can determine that the number in the hundredth column is 2
and in the thousands column we have 6.

Since 6 in the thousands column is greater than 5, we will round up and make the 2 from the hundredths column 3
and remove the 6. Therefore, 3.426 rounded to the nearest hundredth is 3.43.

Here is another example:

Round 7.943 to the nearest tenth.

| ones | decimal | tenths | hundredths | thousandths |
| :-----: | :-----: | :-----: | :-----: | :-----: |
| 7 | . | 9 | 4 | 3 |

Since 4 in the hundredths column is less than 5, we will simply remove it and any numbers 
to the right of it. Therefore, 7.943 rounded to the nearest tenth is 7.9.

One more example:

Round 2.95 to the nearest tenth.

| ones | decimal | tenths | hundredths |
| :-----: | :-----: | :-----: | :-----: |
| 2 | . | 9 | 5 |

Since 5 in the hundredths column will round up and 9 becomes 10, we end up with 3.0.
Therefore, 2.95 rounded to the nearest tenth equals 3.0.